/**
 * ngsi-v2
 * NGSI V2 API
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityType', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/EntityType'), require('./model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NgsiV2) {
      root.NgsiV2 = {};
    }
    root.NgsiV2.TypesApi = factory(root.NgsiV2.ApiClient, root.NgsiV2.EntityType, root.NgsiV2.ErrorResponse);
  }
}(this, function(ApiClient, EntityType, ErrorResponse) {
  'use strict';

  /**
   * Types service.
   * @module /TypesApi
   * @version 0.1.0
   */

  /**
   * Constructs a new TypesApi. 
   * @alias module:/TypesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the retrieveEntityType operation.
     * @callback module:/TypesApi~retrieveEntityTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns a JSON object with information about the type: * &#x60;attrs&#x60; : the set of attribute names along with all the entities of such type, represented in   a JSON object whose keys are the attribute names and whose values contain information of such   attributes (in particular a list of the types used by attributes with that name along with all the   entities). * &#x60;count&#x60; : the number of entities belonging to that type.  Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param {String} entityType Entity Type
     * @param {module:/TypesApi~retrieveEntityTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityType}
     */
    this.retrieveEntityType = function(entityType, callback) {
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType == undefined || entityType == null) {
        throw new Error("Missing the required parameter 'entityType' when calling retrieveEntityType");
      }


      var pathParams = {
        'entityType': entityType
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EntityType;

      return this.apiClient.callApi(
        '/types/{entityType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveEntityTypes operation.
     * @callback module:/TypesApi~retrieveEntityTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If the &#x60;values&#x60; option is not in use, this operation returns a JSON array with the entity types. Each element is a JSON object with information about the type: * &#x60;type&#x60; : the entity type name. * &#x60;attrs&#x60; : the set of attribute names along with all the entities of such type, represented in   a JSON object whose keys are the attribute names and whose values contain information of such   attributes (in particular a list of the types used by attributes with that name along with all the   entities). * &#x60;count&#x60; : the number of entities belonging to that type. If the &#x60;values&#x60; option is used, the operation returns a JSON array with a list of entity type names as strings. Results are ordered by entity &#x60;type&#x60; in alphabetical order.  Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of types to be retrieved.
     * @param {Number} opts.offset Skip a number of records.
     * @param {module:model/String} opts.options Options dictionary.
     * @param {module:/TypesApi~retrieveEntityTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityType>}
     */
    this.retrieveEntityTypes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'options': opts['options']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [EntityType];

      return this.apiClient.callApi(
        '/types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
