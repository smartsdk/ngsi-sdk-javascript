/**
 * ngsi-v2
 * NGSI V2 API RC-2018.04
 *
 * OpenAPI spec version: v2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Registration', 'model/RegistrationResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ErrorResponse'), require('./model/Registration'), require('./model/RegistrationResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NgsiV2) {
      root.NgsiV2 = {};
    }
    root.NgsiV2.RegistrationsApi = factory(root.NgsiV2.ApiClient, root.NgsiV2.ErrorResponse, root.NgsiV2.Registration, root.NgsiV2.RegistrationResponse);
  }
}(this, function(ApiClient, ErrorResponse, Registration, RegistrationResponse) {
  'use strict';

  /**
   * Registrations service.
   * @module /RegistrationsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new RegistrationsApi. 
   * @alias module:/RegistrationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createRegistrations operation.
     * @callback module:/RegistrationsApi~createRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new context provider registration. This is typically used for binding context sources as providers of certain data. The registration is represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 201 Created * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param {module:model/Registration} body 
     * @param {module:/RegistrationsApi~createRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createRegistrations = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRegistrations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistration operation.
     * @callback module:/RegistrationsApi~deleteRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a context provider registration. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param {String} registrationId registration Id.
     * @param {module:/RegistrationsApi~deleteRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRegistration = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling deleteRegistration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveRegistration operation.
     * @callback module:/RegistrationsApi~retrieveRegistrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegistrationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The response is the registration represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param {String} registrationId registration Id.
     * @param {module:/RegistrationsApi~retrieveRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegistrationResponse}
     */
    this.retrieveRegistration = function(registrationId, callback) {
      var postBody = null;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling retrieveRegistration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = RegistrationResponse;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveRegistrations operation.
     * @callback module:/RegistrationsApi~retrieveRegistrationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RegistrationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the context provider registrations present in the system.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit the number of types to be retrieved
     * @param {Number} opts.offset Skip a number of records
     * @param {module:model/String} opts.options Options dictionary
     * @param {module:/RegistrationsApi~retrieveRegistrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RegistrationResponse>}
     */
    this.retrieveRegistrations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'options': opts['options'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [RegistrationResponse];

      return this.apiClient.callApi(
        '/registrations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegistration operation.
     * @callback module:/RegistrationsApi~updateRegistrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new context provider registration. This is typically used for binding context sources as providers of certain data. The registration is represented by a JSON object as described at the beginning of this section. Response: * Successful operation uses 201 Created * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     * @param {String} registrationId registration Id.
     * @param {module:model/Registration} body 
     * @param {module:/RegistrationsApi~updateRegistrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateRegistration = function(registrationId, body, callback) {
      var postBody = body;

      // verify the required parameter 'registrationId' is set
      if (registrationId === undefined || registrationId === null) {
        throw new Error("Missing the required parameter 'registrationId' when calling updateRegistration");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRegistration");
      }


      var pathParams = {
        'registrationId': registrationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['fiware_token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/registrations/{registrationId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
